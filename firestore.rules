rules_version = '2';
service cloud.firestore {

  match /databases/{database}/documents {

    match /games/{gameId} {

      allow create: if request.auth != null
      	&& request.resource.data.keys().hasOnly(['white_uid', 'white_user', 'black_uid', 'black_user']);

      allow read, update: if request.auth != null
      	&& (request.auth.uid in resource.data.values() || resource.data.black_uid == '');

    	allow delete: if false;

    }

    match /connection/{connectionId} {

      allow create: if request.auth != null
      	&& request.resource.data.keys().hasAll([request.auth.uid, 'game_id']);

      allow read, update: if request.auth != null
      	&& (request.auth.uid in resource.data.keys() || request.auth.uid in get(/databases/$(database)/documents/games/$(resource.data.game_id)).data.values());

      allow delete: if request.auth != null
      	&& request.auth.uid in resource.data.keys()
        && get(/databases/$(database)/documents/games_info/$(resource.data.game_id)).data.game_status != 'Active game';

    }

    match /games_info/{game_infoId} {

      allow create: if request.auth != null
      	&& request.resource.data.keys().hasOnly(['game_id','start_date','last_date','color_turn','moves','game_time','black_time','white_time','black_dead_tools','white_dead_tools','tools_position','threats_map','game_status','chess_table']);

      allow read, update: if request.auth != null && resource.data != null
      	&& (request.auth.uid in get(/databases/$(database)/documents/games/$(resource.data.game_id)).data.values());

      allow delete: if false;

    }
   }
}
